import org.ajoberstar.grgit.Grgit

import static org.apache.tools.ant.taskdefs.condition.Os.FAMILY_WINDOWS
import static org.apache.tools.ant.taskdefs.condition.Os.isFamily

buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'java-library'
    id 'groovy'
    id 'maven-publish'
    id 'nu.studer.rocker' version '3.0.2'
//    id "com.fizzed.rocker" version "1.2.3"
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id "org.ajoberstar.grgit" version "4.1.0"
}

repositories {
    jcenter()
    maven { url "https://jitpack.io" }
}

def getScmVersion = {
    def git = Grgit.open(dir: file('.'))
    def describedCommit = git.describe()?.toString()?.trim() ?: file('VERSION').text.trim()
    def masterRevision = git.resolve.toCommit(git.resolve.toBranch('master'))?.id
    def isSnapshot = masterRevision != git.head()?.id
    return describedCommit.replaceAll("(.*)-[0-9]+-g[0-9a-f]{7}(.*)", '$1$2') + (isSnapshot ? "-SNAPSHOT" : "")
}

version = project.findProperty('version') != 'unspecified' ? project.version : getScmVersion() ?: '0.0.1-SNAPSHOT'
group = 'net.gradleutil'
println version

file('VERSION').text.with { versionText ->
    if (!versionText == version) {
        logger.lifecycle("Updated version ${versionText} to ${version}")
        file('VERSION').text = version
    }
}

dependencies {
    implementation 'com.typesafe:config:1.4.1'
    implementation 'com.fizzed:rocker-runtime:1.2.3'
    implementation 'org.json:json:20200518'
    implementation 'com.github.everit-org.json-schema:org.everit.json.schema:1.12.1'
    implementation files('buildSrc/build/libs/conf-template.jar')
    shadow localGroovy()
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
}

task deleteGeneratedTestData(type: Delete) {
    def tempDir = file('src/test/groovy/net/gradleutil/conf/temp')
    outputs.upToDateWhen { !tempDir.exists() }
    delete tempDir
}

compileGroovy.dependsOn(deleteGeneratedTestData)

/*
sourceSets.main.rocker.srcDir('src/main/rocker')
rocker {
    failOnError true
    skipTouch true
    // must not be empty when skipTouch is equal to false
    touchFile ""
    javaVersion '1.8'
    extendsClass null
    extendsModelClass null
    optimize null
    discardLogicWhitespace true
    targetCharset null
    suffixRegex null
    postProcessing null
}
*/

rocker {
    configurations {
        main {
            templateDir = file('src/main/rocker')
            outputDir = file("${buildDir}/generated-src/rocker")
            optimize = true
        }
    }
}

allprojects {
    plugins.withType(BasePlugin) {
        project.afterEvaluate {
            def deleteTasks = tasks.withType(Delete) + project.tasks.findByPath('clean')
            def otherTasks = tasks - deleteTasks
            otherTasks*.mustRunAfter deleteTasks
        }
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

jar {
    enabled(false)
    archiveClassifier.set('core')
    dependsOn(shadowJar)
}

shadowJar {
    mergeServiceFiles()
    archiveClassifier.set('')
    doLast {
        logger.lifecycle("Shadow jar:" + outputs.files.first())
    }
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

task artifactList {
    group = "Help"
    description = "Displays the artifacts associated with each configuration of " + project
    doFirst {
        configurations.findAll().each { config ->
            println "${config}:"
            config.allArtifacts.getFiles().each { file -> println " " + file }
            config.dependencies.each { dep -> println " dep:" + dep.toString() }
            println ' '
        }
    }
}


tasks.withType(AbstractPublishToMaven) { publishTask ->
    doLast {
        if (publishTask instanceof PublishToMavenRepository) {
            logger.lifecycle("Published ${project.group}.${project.name}:${version} to ${publishTask.repository.url}")
        } else if (publishTask instanceof PublishToMavenLocal) {
            String repoPath = repositories.mavenLocal().url.toURL().getFile()
            publication.with { p ->
                def sb = new StringBuilder()
                p.artifacts.each {
                    String artifactPath = p.groupId.replace(".", "/") + "/" + p.artifactId + "/" + p.version
                    sb.append('\n  ' + repoPath).append(artifactPath)
                            .append(it.classifier ? '-' + it.classifier : '').append('.' + it.extension)
                }
                logger.lifecycle("Published ${p.groupId}:${p.artifactId}:${p.version}${sb.toString()}")
            }
        } else {
            logger.lifecycle("Published ${project.group}:${project.name}:${version}")
        }
    }
}