import org.ajoberstar.grgit.Grgit

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

plugins {
    id 'java-library'
    id 'groovy'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id "org.ajoberstar.grgit" version "4.1.0"
}

repositories {
    maven { url "https://jitpack.io" }
    maven { url "https://oss.sonatype.org/service/local/repositories/snapshots/content/" }
    maven { url "https://repository.jboss.org/nexus/content/repositories/releases/" }
    mavenCentral()
    mavenLocal()
}

def versionFile = file('VERSION')
def getScmVersion = {
    def git = Grgit.open(dir: file('.')) as Grgit
    if (!['master', 'main'].contains(git.branch.current().name)) {
        version = versionFile.text.trim() + '-SNAPSHOT'
    } else {
        version = versionFile.text.trim()
    }
}

version = project.findProperty('version') != 'unspecified' ? project.version : getScmVersion() ?: '0.0.1-SNAPSHOT'
group = 'net.gradleutil'

file('VERSION').text.with { versionText ->
    if (!versionText == version) {
        logger.lifecycle("Updated version VERSION file from ${versionText} to ${version}")
        file('VERSION').text = version
    }
}

dependencies {
    implementation 'org.codehaus.groovy:groovy-all:3.0.8'
    implementation 'com.typesafe:config:1.4.1'
    implementation 'org.json:json:20210307'
    implementation 'com.github.everit-org.json-schema:org.everit.json.schema:1.12.2'
    implementation group: 'org.jboss.dna', name: 'dna-common', version: '0.7'
//    implementation 'gg.jte:jte:1.10.0'
//    implementation 'org.eclipse.emfatic:org.eclipse.emfatic.core:0.8.0-SNAPSHOT'
//    implementation group: 'org.eclipse.emf', name: 'org.eclipse.emf.ecore', version: '2.23.0'
    
    testImplementation('org.spockframework:spock-core:2.0-groovy-3.0') {
        exclude group: 'org.codehaus.groovy'
    }

    testImplementation('org.junit.jupiter:junit-jupiter-api')

}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

java {
    withJavadocJar()
    withSourcesJar()
}

task jarTests(type: Jar, dependsOn: testClasses) {
    archiveClassifier.set 'tests'
    from sourceSets.test.output
}

jar {
    enabled(false)
    archiveClassifier.set('core')
    dependsOn(jarTests)
    dependsOn(shadowJar)
}

shadowJar {
    mergeServiceFiles()
    mergeGroovyExtensionModules()
    minimize()
    archiveClassifier.set('')
    relocate 'org.json', 'net.gradleutil.conf.json'
    relocate 'org.apache', 'net.gradleutil.conf'
    relocate 'org.jboss', 'net.gradleutil.conf'
    relocate 'org.everit', 'net.gradleutil.conf'
    relocate 'com.typesafe', 'net.gradleutil.conf'
    dependencies {
        exclude(dependency('org.codehaus.groovy:.*'))
        exclude(dependency('org.spockframework:.*'))
        exclude(dependency('org.junit.jupiter:.*'))
        exclude(dependency('org.junit.platform:.*'))
        exclude(dependency('org.junit:.*'))
        exclude(dependency('junit:.*'))
        exclude(dependency('jline:.*'))
        exclude(dependency('org.opentest4j:.*'))
        exclude(dependency('org.testng:.*'))
        exclude(dependency('org.apache.ant:.*'))
        exclude(dependency('joda-time:.*'))
        // exclude(dependency { println it.moduleGroup })
    }
    exclude('org/everit', 'META-INF/maven/org.everit.json/')
    doLast {
        def jarFile = outputs.files.first() as File
        def formatStr = "%,10.2f"
        logger.lifecycle("Shadow jar:" + jarFile + "${String.format(formatStr, jarFile.length() / 1024)} Mb")
    }
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
            artifact sourcesJar
            artifact javadocJar
            artifact jarTests
        }
    }
}

task artifactList {
    group = "Help"
    description = "Displays the artifacts associated with each configuration of " + project
    doFirst {
        configurations.findAll().each { config ->
            println "${config}:"
            config.allArtifacts.getFiles().each { file -> println " " + file }
            config.dependencies.each { dep -> println " dep:" + dep.toString() }
            println ' '
        }
    }
}


tasks.register("depsize") {
    description = 'Prints dependencies for "default" configuration'
    doLast() {
        listConfigurationDependencies(configurations.default)
    }
}

tasks.register("depsize-all-configurations") {
    description = 'Prints dependencies for all available configurations'
    doLast() {
        configurations
                .findAll { it.isCanBeResolved() }
                .each { listConfigurationDependencies(it) }
    }
}

def listConfigurationDependencies(Configuration configuration) {
    def formatStr = "%,10.2f"

    def size = configuration.collect { it.length() / (1024 * 1024) }.sum()

    def out = new StringBuffer()
    out << "\nConfiguration name: \"${configuration.name}\"\n"
    if (size) {
        out << 'Total dependencies size:'.padRight(65)
        out << "${String.format(formatStr, size)} Mb\n\n"

        configuration.sort { -it.length() }
                .each {
                    out << "${it.name}".padRight(65)
                    out << "${String.format(formatStr, (it.length() / 1024))} kb\n"
                }
    } else {
        out << 'No dependencies found'
    }
    println(out)
}


tasks.withType(AbstractPublishToMaven) { publishTask ->
    doLast {
        if (publishTask instanceof PublishToMavenRepository) {
            logger.lifecycle("Published ${project.group}.${project.name}:${version} to ${publishTask.repository.url}")
        } else if (publishTask instanceof PublishToMavenLocal) {
            String repoPath = repositories.mavenLocal().url.toURL().getFile()
            publication.with { p ->
                def sb = new StringBuilder()
                p.artifacts.each {
                    String artifactPath = p.groupId.replace(".", "/") + "/" + p.artifactId + "/" + p.version + "/" +
                            p.artifactId + "-" + p.version
                    sb.append('\n  ' + repoPath).append(artifactPath)
                            .append(it.classifier ? '-' + it.classifier : '').append('.' + it.extension)
                }
                logger.lifecycle("Published ${p.groupId}:${p.artifactId}:${p.version}${sb.toString()}")
            }
        } else {
            logger.lifecycle("Published ${project.group}:${project.name}:${version}")
        }
    }
}